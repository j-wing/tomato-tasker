{"version":3,"sources":["TaskItem.tsx","Timer.tsx","App.tsx","index.js"],"names":["TaskItem","className","placeholder","defaultValue","this","props","before","onChange","beforeChangeHandler","after","afterChangeHandler","React","Component","Timer","timer","state","timerValue","timerRunning","btnText","Math","floor","onClick","toggleRunning","bind","reset","setState","s","oldProps","oldState","kickOffTimer","clearTimeout","Notification","resetHandler","setTimeout","App","checkNotificationPermission","taskItems","items","flatMap","t","i","key","e","handleBeforeChange","handleAfterChange","reverse","handleReset","taskIndex","newVal","target","value","task","update","$merge","$splice","newTask","concat","window","permission","requestPermission","then","p","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.11a23102.chunk.js","sourcesContent":["import React from 'react';\n\ninterface TaskItemProps {\n    before: string,\n    after: string,\n    beforeChangeHandler: React.ChangeEventHandler,\n    afterChangeHandler: React.ChangeEventHandler,\n}\n\ninterface TaskItemState {\n}\n\nexport class TaskItem extends React.Component<TaskItemProps, TaskItemState> {\n    render() {\n        return <div className=\"task-item\">\n            <textarea className=\"before\"\n                      placeholder=\"Before\"\n                      defaultValue={this.props.before}\n                      onChange={this.props.beforeChangeHandler}></textarea>\n            <textarea\n                      className=\"after\"\n                      placeholder=\"After\"\n                      defaultValue={this.props.after}\n                      onChange={this.props.afterChangeHandler}></textarea>\n        </div>\n    }\n}\n","import React from 'react';\n\ninterface TimerProps {\n    resetHandler: () => void,\n}\n\ninterface TimerState {\n      timerValue: number,\n      timerRunning: boolean,\n}\n\nconst TIMER_DEFAULT = 60 * 25;\n\nexport class Timer extends React.Component<TimerProps, TimerState> {\n    timer: NodeJS.Timeout | null = null;\n    \n    constructor(props: TimerProps) {\n        super(props);\n\n        this.state  = {\n            timerValue: TIMER_DEFAULT,\n            timerRunning: false\n        }\n    }\n\n    render() {\n        let btnText = (this.state.timerRunning) ? \"Pause\" : \"Start\";\n\n        return <div className=\"timer\">\n            <div className=\"timerText\">\n                {Math.floor(this.state.timerValue / 60)}:{this.state.timerValue % 60}\n            </div>\n            <button onClick={this.toggleRunning.bind(this)}>\n                {btnText}\n            </button>\n            <button onClick={this.reset.bind(this)}>\n                + New\n            </button>\n        </div>\n    }\n\n    toggleRunning() {\n        this.setState(s => ({timerRunning: !s.timerRunning}));\n    }\n\n    componentDidUpdate(oldProps: TimerProps, oldState: TimerState) {\n        if (this.state.timerRunning && !oldState.timerRunning) {\n            this.kickOffTimer();\n        } else if (!this.state.timerRunning && oldState.timerRunning && this.timer !== null) {\n            clearTimeout(this.timer);\n        }\n\n        if (this.state.timerValue === 0 && oldState.timerValue !== 0) {\n            new Notification(\"Pomo Timer Finished!\");\n        }\n    }\n\n    reset() {\n        this.setState({\n            timerRunning: false,\n            timerValue: TIMER_DEFAULT\n        })\n        this.props.resetHandler();\n    }\n\n    kickOffTimer() {\n        if (this.state.timerValue === 0) {\n            return;\n        }\n\n        this.timer = setTimeout(() => {\n            this.setState(s => ({timerValue: s.timerValue - 1}));\n            this.kickOffTimer();\n        }, 1000);\n    }\n}\n","/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from 'react';\nimport update from 'immutability-helper';\n\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport { TaskItem } from './TaskItem';\nimport { Timer } from './Timer';\nimport { Task } from './task';\n\n\n\ninterface AppProps {\n}\n\ninterface AppState {\n  taskItems: Array<Task>\n\n}\n\nclass App extends React.Component<AppProps, AppState> {\n  constructor(props: AppProps) {\n    super(props);\n\n    this.checkNotificationPermission();\n\n    this.state = {\n      taskItems: [{before: \"\", after: \"\"}]\n    };\n  }\n\n  render() {\n    let items = this.state.taskItems.flatMap((t, i) => \n      <TaskItem\n        before={t.before}\n        after={t.after}\n        key={i}\n        beforeChangeHandler={e => this.handleBeforeChange(i, e)}\n        afterChangeHandler={e => this.handleAfterChange(i, e)} />\n    ).reverse();\n    return <div className=\"app\">\n      <Timer resetHandler={this.handleReset.bind(this)} />\n      <div className=\"items\">\n        {items}\n      </div>\"\n    </div>\n  }\n\n  handleBeforeChange(taskIndex: number, e: React.ChangeEvent) {\n    let newVal = (e.target as HTMLTextAreaElement).value;\n    this.setState(s => {\n      let task = update(this.state.taskItems[taskIndex], {$merge: {before: newVal}});\n      return {taskItems: update(s.taskItems, {$splice: [[taskIndex, 1, task]]})}\n    });\n\n  }\n\n  handleAfterChange(taskIndex: number, e: React.ChangeEvent) {\n    let newVal = (e.target as HTMLTextAreaElement).value;\n    this.setState(s => {\n      let task = update(this.state.taskItems[taskIndex], {$merge: {after: newVal}});\n      return {taskItems: update(s.taskItems, {$splice: [[taskIndex, 1, task]]})}\n    });\n  }\n\n  handleReset() {\n    let newTask: Task = {before: \"\", after: \"\"};\n    this.setState(s => ({\n     taskItems: [newTask].concat(s.taskItems)\n    }))\n  }\n\n  checkNotificationPermission() {\n    if (window.Notification.permission !== \"granted\") {\n      window.Notification.requestPermission().then(p => {\n        if (p === \"granted\") {\n          new Notification(\"Tomato Tasker notifications are on!\");\n        }\n      })\n    }\n  }\n}\n\nexport default App;\n","/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}