{"version":3,"sources":["TaskItem.tsx","Timer.tsx","App.tsx","index.js"],"names":["TaskItem","className","placeholder","defaultValue","this","props","before","after","React","Component","Timer","timer","state","timerValue","timerRunning","btnText","Math","floor","onClick","toggleRunning","bind","reset","setState","s","oldProps","oldState","kickOffTimer","clearTimeout","Notification","resetHandler","setTimeout","App","taskItems","items","flatMap","t","i","key","reverse","handleReset","newTask","concat","ReactDOM","render","document","getElementById"],"mappings":"qPAUaA,G,YAAb,iLAEQ,OAAO,yBAAKC,UAAU,aAClB,8BAAUA,UAAU,SAASC,YAAY,SAASC,aAAcC,KAAKC,MAAMC,SAC3E,8BAAUL,UAAU,QAAQC,YAAY,QAAQC,aAAcC,KAAKC,MAAME,aAJrF,GAA8BC,IAAMC,YCGvBC,EAAb,YAGI,WAAYL,GAAoB,IAAD,8BAC3B,4CAAMA,KAHVM,MAA+B,KAK3B,EAAKC,MAAS,CACVC,WATU,KAUVC,cAAc,GALS,EAHnC,sEAaQ,IAAIC,EAAWX,KAAKQ,MAAME,aAAgB,QAAU,QAEpD,OAAO,yBAAKb,UAAU,SAClB,yBAAKA,UAAU,aACVe,KAAKC,MAAMb,KAAKQ,MAAMC,WAAa,IADxC,IAC8CT,KAAKQ,MAAMC,WAAa,IAEtE,4BAAQK,QAASd,KAAKe,cAAcC,KAAKhB,OACpCW,GAEL,4BAAQG,QAASd,KAAKiB,MAAMD,KAAKhB,OAAjC,YAtBZ,sCA6BQA,KAAKkB,UAAS,SAAAC,GAAC,MAAK,CAACT,cAAeS,EAAET,mBA7B9C,yCAgCuBU,EAAsBC,GACjCrB,KAAKQ,MAAME,eAAiBW,EAASX,aACrCV,KAAKsB,gBACGtB,KAAKQ,MAAME,cAAgBW,EAASX,cAA+B,OAAfV,KAAKO,OACjEgB,aAAavB,KAAKO,OAGQ,IAA1BP,KAAKQ,MAAMC,YAA4C,IAAxBY,EAASZ,YACxC,IAAIe,aAAa,0BAxC7B,8BA6CQxB,KAAKkB,SAAS,CACVR,cAAc,EACdD,WAjDU,OAmDdT,KAAKC,MAAMwB,iBAjDnB,qCAoDoB,IAAD,OACmB,IAA1BzB,KAAKQ,MAAMC,aAIfT,KAAKO,MAAQmB,YAAW,WACpB,EAAKR,UAAS,SAAAC,GAAC,MAAK,CAACV,WAAYU,EAAEV,WAAa,MAChD,EAAKa,iBACN,UA5DX,GAA2BlB,IAAMC,WCgDlBsB,E,YA5Bb,WAAY1B,GAAkB,IAAD,8BAC3B,4CAAMA,KAEDO,MAAQ,CACXoB,UAAW,CAAC,CAAC1B,OAAQ,GAAIC,MAAO,MAJP,E,sEAS3B,IAAI0B,EAAQ7B,KAAKQ,MAAMoB,UAAUE,SAAQ,SAACC,EAAGC,GAAJ,OACvC,kBAAC,EAAD,CAAU9B,OAAQ6B,EAAE7B,OAAQC,MAAO4B,EAAE5B,MAAO8B,IAAKD,EAAID,EAAE7B,OAAS6B,EAAE5B,WAClE+B,UACF,OAAO,yBAAKrC,UAAU,OACpB,kBAAC,EAAD,CAAO4B,aAAczB,KAAKmC,YAAYnB,KAAKhB,QAC3C,yBAAKH,UAAU,SACZgC,GAHE,O,oCASP,IAAIO,EAAgB,CAAClC,OAAQ,GAAIC,MAAO,IACxCH,KAAKkB,UAAS,SAAAC,GAAC,MAAK,CACnBS,UAAW,CAACQ,GAASC,OAAOlB,EAAES,mB,GAxBjBxB,IAAMC,WCVxBiC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.aabbaf6b.chunk.js","sourcesContent":["import React from 'react';\n\ninterface TaskItemProps {\n    before: string,\n    after: string\n}\n\ninterface TaskItemState {\n}\n\nexport class TaskItem extends React.Component<TaskItemProps, TaskItemState> {\n    render() {\n        return <div className=\"task-item\">\n            <textarea className=\"before\" placeholder=\"Before\" defaultValue={this.props.before}></textarea>\n            <textarea className=\"after\" placeholder=\"After\" defaultValue={this.props.after}></textarea>\n        </div>\n    }\n}\n","import React from 'react';\n\ninterface TimerProps {\n    resetHandler: () => void,\n}\n\ninterface TimerState {\n      timerValue: number,\n      timerRunning: boolean,\n}\n\nconst TIMER_DEFAULT = 60 * 25;\n\nexport class Timer extends React.Component<TimerProps, TimerState> {\n    timer: NodeJS.Timeout | null = null;\n    \n    constructor(props: TimerProps) {\n        super(props);\n\n        this.state  = {\n            timerValue: TIMER_DEFAULT,\n            timerRunning: false\n        }\n    }\n\n    render() {\n        let btnText = (this.state.timerRunning) ? \"Pause\" : \"Start\";\n\n        return <div className=\"timer\">\n            <div className=\"timerText\">\n                {Math.floor(this.state.timerValue / 60)}:{this.state.timerValue % 60}\n            </div>\n            <button onClick={this.toggleRunning.bind(this)}>\n                {btnText}\n            </button>\n            <button onClick={this.reset.bind(this)}>\n                + New\n            </button>\n        </div>\n    }\n\n    toggleRunning() {\n        this.setState(s => ({timerRunning: !s.timerRunning}));\n    }\n\n    componentDidUpdate(oldProps: TimerProps, oldState: TimerState) {\n        if (this.state.timerRunning && !oldState.timerRunning) {\n            this.kickOffTimer();\n        } else if (!this.state.timerRunning && oldState.timerRunning && this.timer !== null) {\n            clearTimeout(this.timer);\n        }\n\n        if (this.state.timerValue === 0 && oldState.timerValue !== 0) {\n            new Notification(\"Pomo Timer Finished!\");\n        }\n    }\n\n    reset() {\n        this.setState({\n            timerRunning: false,\n            timerValue: TIMER_DEFAULT\n        })\n        this.props.resetHandler();\n    }\n\n    kickOffTimer() {\n        if (this.state.timerValue === 0) {\n            return;\n        }\n\n        this.timer = setTimeout(() => {\n            this.setState(s => ({timerValue: s.timerValue - 1}));\n            this.kickOffTimer();\n        }, 1000);\n    }\n}\n","/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { TaskItem } from './TaskItem';\nimport { Timer } from './Timer';\nimport { Task } from './task';\n\n\n\ninterface AppProps {\n}\n\ninterface AppState {\n  taskItems: Array<Task>\n}\n\nclass App extends React.Component<AppProps, AppState> {\n  constructor(props: AppProps) {\n    super(props);\n\n    this.state = {\n      taskItems: [{before: \"\", after: \"\"}]\n    };\n  }\n\n  render() {\n    let items = this.state.taskItems.flatMap((t, i) => \n      <TaskItem before={t.before} after={t.after} key={i + t.before + t.after} />\n    ).reverse();\n    return <div className=\"app\">\n      <Timer resetHandler={this.handleReset.bind(this)} />\n      <div className=\"items\">\n        {items}\n      </div>\"\n    </div>\n  }\n\n  handleReset() {\n    let newTask: Task = {before: \"\", after: \"\"};\n    this.setState(s => ({\n     taskItems: [newTask].concat(s.taskItems)\n    }))\n  }\n}\n\nexport default App;\n","/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}